openapi: 3.0.0
info:
  description: |
    Swagger API interface for the You Read Book App
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: "1.0.0"
  title: You Read Backend
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://you-read-api.onrender.com/api-docs
tags:
  - name: You Read
    description: WIP: Access the various endpoints to integrate with the frontend
    externalDocs:
      description: Find out more
      url: 'http://you-read.vercel.app'
openapi: 3.0.0
info:
  version: "1.0.0"
  title: Your API Title
openapi: 3.0.0
info:
  version: "1.0.0"
  title: Your API Title
paths:
  /api/v1/users:
    post:
      summary: Create User
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User created successfully

  /api/v1/users/{username}:
    get:
      summary: Get User by Username
      operationId: getUserByUsername
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation

    put:
      summary: Update User
      operationId: updateUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User updated successfully

  /api/v1/book-stats:
    post:
      summary: Create Book Stats
      operationId: createBookStats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookStatsRequest'
      responses:
        '200':
          description: Book Stats created successfully

  /api/v1/book-stats/{id}:
    get:
      summary: Get Book Stats by ID
      operationId: getBookStatsById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation

    put:
      summary: Update Book Stats
      operationId: updateBookStats
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookStatsRequest'
      responses:
        '200':
          description: Book Stats updated successfully

    delete:
      summary: Delete Book Stats
      operationId: deleteBookStats
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book Stats deleted successfully

  /api/v1/book-goals:
    post:
      summary: Create Book Goals
      operationId: createBookGoals
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookGoalsRequest'
      responses:
        '200':
          description: Book Goals created successfully

  /api/v1/book-goals/{id}:
    get:
      summary: Get Book Goals by ID
      operationId: getBookGoalsById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation

    put:
      summary: Update Book Goals
      operationId: updateBookGoals
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookGoalsRequest'
      responses:
        '200':
          description: Book Goals updated successfully

    delete:
      summary: Delete Book Goals
      operationId: deleteBookGoals
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book Goals deleted successfully

  /api/v1/books:
    post:
      summary: Create Book
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '200':
          description: Book created successfully

  /api/v1/books/{id}:
    get:
      summary: Get Book by ID
      operationId: getBookById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation

    put:
      summary: Update Book
      operationId: updateBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '200':
          description: Book updated successfully

    delete:
      summary: Delete Book
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book deleted successfully

components:
  schemas:
    UserRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          unique: true
        password:
          type: string
          minLength: 6
        username:
                  type: string
        twitter_handle:
          type: string
          minLength: 3
          maxLength: 50
        facebook_handle:
          type: string
          minLength: 3
          maxLength: 50
        date_of_birth:
          type: string
          format: date
        country:
          type: string
          minLength: 3
          maxLength: 50

    BookStatsRequest:
      type: object
      properties:
        pagesCompleted:
          type: number
          maximum: 250
        booksCompleted:
          type: number
          maximum: 250
        booksPerGenre:
          type: string
          maxLength: 250
        pagesPerWeek:
          type: number
          maximum: 250
        createdBy:
          type: string
          format: uuid

    BookGoalsRequest:
      type: object
      properties:
        totalRead:
          type: number
          maximum: 250
        monthlyRead:
          type: number
          maximum: 250
        pagesPerDay:
          type: string
          maxLength: 250
        pagesPerWeek:
          type: number
          maximum: 250
        createdBy:
          type: string
          format: uuid
        lastUpdated:
          type: string
          format: date
        timeInterval:
          type: number
          enum: [1, 3, 6, 12]

    BookRequest:
      type: object
      properties:
        bookTitle:
          type: string
          maxLength: 250
        bookAuthor:
          type: string
          maxLength: 250
        bookGenre:
          type: string
          maxLength: 250
        bookPages:
          type: number
          maximum: 250
        completed:
          type: boolean
        createdBy:
          type: string
          format: uuid



